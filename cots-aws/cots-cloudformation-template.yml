AWSTemplateFormatVersion: 2010-09-09

Description: The Command of the Sea CloudFormation template.

# FIXME parameterize
#Parameters:

Resources:
  # IAM

  ## IAM ROLES
  CotsExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Creating service role in IAM for AWS Lambda"
      RoleName: "cots-lambda-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
      Policies:
        - PolicyName: "LambdaDynamoDBPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
  CotsSnsRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Creating service role in IAM for Amazon Cognito to send SNS messages"
      RoleName: "cots-sns-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "cognito-idp.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"
  CotsAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "cots-authorized-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"
  CotsUnauthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "cots-unauthorized-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Deny"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action: "sts:AssumeRoleWithWebIdentity"

  # COGNITO

  ## COGNITO USER POOL
  CotsUserPool:
    Type: "AWS::Cognito::UserPool"
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: "cots-user-pool"
      Schema:
        - Name: "email"
          Required: true
          Mutable: true
      AutoVerifiedAttributes: "email"
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Your verification code"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes: "email"
      MfaConfiguration: "OFF"
      SmsVerificationMessage: "Your verification code is {####}"
      SmsConfiguration:
        SnsCallerArn: !GetAtt CotsSnsRole.Arn
        ExternalId: cots-external-id

  ## COGNITO USER POOL CLIENTS
  CotsUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: "cots-user-pool-client"
      GenerateSecret: true
      RefreshTokenValidity: 30
      UserPoolId: !Ref CotsUserPool
    DependsOn: CotsUserPool

  ## COGNITO IDENTITY POOL
  CotsIndentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: "cots-identity-pool"
      CognitoIdentityProviders:
        - ClientId:  !Ref CotsUserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region",  client: !Ref CotsUserPool}
      AllowUnauthenticatedIdentities: false
  CotsIndentityPoolRoleMap:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref CotsIndentityPool
      Roles:
        unauthenticated: !GetAtt CotsUnauthorizedRole.Arn
        authenticated: !GetAtt CotsAuthorizedRole.Arn
    DependsOn: CotsIndentityPool

  # API GATEWAY

  ## API GATEWAY REST API
  CotsApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "cots-api"
      Description: "Command of the Sea Application Programming Interface Gateway"

  ## API GATEWAY RESOURCES
  V1Resource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt CotsApi.RootResourceId
      RestApiId: !Ref CotsApi
      PathPart: "v1"
  ### /v1/players
  PlayersResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref V1Resource
      RestApiId: !Ref CotsApi
      PathPart: "players"
  ### /v1/players/my
  MyResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PlayersResource
      RestApiId: !Ref CotsApi
      PathPart: "my"
  ### /v1/players/{playerUuid}
  PlayerResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref PlayersResource
      RestApiId: !Ref CotsApi
      PathPart: "{playerUuid}"
  ### /v1/matches
  MatchesResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref V1Resource
      RestApiId: !Ref CotsApi
      PathPart: "matches"
  ### /v1/matches/{matchUuid}
  MatchResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref MatchesResource
      RestApiId: !Ref CotsApi
      PathPart: "{matchUuid}"
  ### /v1/matches/{matchUuid}/ships
  ShipsResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref MatchResource
      RestApiId: !Ref CotsApi
      PathPart: "ships"

  ## API GATEWAY METHODS
  ### POST /v1/players
  CreatePlayerPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt CreatePlayerFunction.Arn
      ResourceId: !Ref PlayersResource
      RestApiId: !Ref CotsApi
  ### GET /v1/players
  RetrievePlayersGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt RetrievePlayersFunction.Arn
      ResourceId: !Ref PlayersResource
      RestApiId: !Ref CotsApi
  ### GET /v1/players/my
  ViewPlayerGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt ViewPlayerFunction.Arn
      ResourceId: !Ref MyResource
      RestApiId: !Ref CotsApi
  ### PUT /v1/players/my
  UpdateAvatarPatchMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "PATCH"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt UpdateAvatarFunction.Arn
      ResourceId: !Ref MyResource
      RestApiId: !Ref CotsApi
  ### POST /v1/players/my
  LogoutPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt LogoutFunction.Arn
      ResourceId: !Ref MyResource
      RestApiId: !Ref CotsApi
  ### POST /v1/players/my
  DeletePlayerDeleteMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt DeletePlayerFunction.Arn
      ResourceId: !Ref MyResource
      RestApiId: !Ref CotsApi
  ### GET /v1/players/{playerUuid}
  RetrievePlayerGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt RetrievePlayerFunction.Arn
      ResourceId: !Ref PlayerResource
      RestApiId: !Ref CotsApi
  ### PATCH /v1/players/{playerUuid}
  UpdateStatisticsPatchMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "PATCH"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt UpdateStatisticsFunction.Arn
      ResourceId: !Ref PlayerResource
      RestApiId: !Ref CotsApi
  ### POST /v1/matches
  HostMatchPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt HostMatchFunction.Arn
      ResourceId: !Ref MatchesResource
      RestApiId: !Ref CotsApi
  ### GET /v1/matches
  RetrieveMatchesGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt RetrieveMatchesFunction.Arn
      ResourceId: !Ref MatchesResource
      RestApiId: !Ref CotsApi
  ### GET /v1/matches/{matchUuid}
  RetrieveMatchGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt RetrieveMatchFunction.Arn
      ResourceId: !Ref MatchResource
      RestApiId: !Ref CotsApi
  ### DELETE /v1/matches/{matchUuid}
  CancelMatchDeleteMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "DELETE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt CancelMatchFunction.Arn
      ResourceId: !Ref MatchResource
      RestApiId: !Ref CotsApi
  ### PATCH /v1/matches/{matchUuid}
  HandleMatchPatchMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "PATCH"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt HandleMatchFunction.Arn
      ResourceId: !Ref MatchResource
      RestApiId: !Ref CotsApi
  ### POST /v1/matches/{matchUuid}/ships
  MoveShipPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt MoveShipFunction.Arn
      ResourceId: !Ref ShipsResource
      RestApiId: !Ref CotsApi
  ### OPTIONS /v1/players
  PlayersOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref CotsApi
      ResourceId: !Ref PlayersResource
      HttpMethod: "OPTIONS"
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ### OPTIONS /v1/matches
  MatchesOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref CotsApi
      ResourceId: !Ref MatchesResource
      HttpMethod: "OPTIONS"
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Origin,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'PUT,GET,POST,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: "MOCK"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ## API GATEWAY DEPLOYMENT
  CotsApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "CreatePlayerPostMethod"
      - "RetrievePlayersGetMethod"
      - "ViewPlayerGetMethod"
      - "UpdateAvatarPatchMethod"
      - "LogoutPostMethod"
      - "DeletePlayerDeleteMethod"
      - "RetrievePlayerGetMethod"
      - "UpdateStatisticsPatchMethod"
      - "HostMatchPostMethod"
      - "RetrieveMatchesGetMethod"
      - "RetrieveMatchGetMethod"
      - "CancelMatchDeleteMethod"
      - "HandleMatchPatchMethod"
      - "MoveShipPostMethod"
      - "PlayersOptionsMethod"
      - "MatchesOptionsMethod"
    Properties:
      RestApiId: !Ref CotsApi
      StageName: "dev"

  # LAMBDA

  ## LAMBDA FUNCTIONS
  CreatePlayerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Creates a new player in DynamoDB"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "createPlayer"
      Handler: "org.vincenzolabs.cots.player.handler.CreatePlayerRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  RetrievePlayersFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Retrieves players from DynamoDB sorted according to their number of wins"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "createPlayer"
      Handler: "org.vincenzolabs.cots.player.handler.RetrievePlayersRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  ViewPlayerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Displays player information if it exists or a dummy player after a successful Cognito login"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "viewPlayer"
      Handler: "org.vincenzolabs.cots.player.handler.ViewPlayerRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  UpdateAvatarFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Updates the player's avatar"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "updateAvatar"
      Handler: "org.vincenzolabs.cots.player.handler.UpdateAvatarRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  LogoutFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Logs out the player from Cognito"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "logout"
      Handler: "org.vincenzolabs.cots.player.handler.LogoutRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  DeletePlayerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Deletes a player in DynamoDB"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "createPlayer"
      Handler: "org.vincenzolabs.cots.player.handler.DeletePlayerRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  RetrievePlayerFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Retrieves a player using the refresh token from the match module"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "retrievePlayer"
      Handler: "org.vincenzolabs.cots.player.handler.RetrievePlayerRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  UpdateStatisticsFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Updates a player's statistics and tournament statistics from the match module"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-player.zip"
      FunctionName: "updateStatistics"
      Handler: "org.vincenzolabs.cots.player.handler.UpdateStatisticsRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  HostMatchFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Hosts a new match"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "hostMatch"
      Handler: "org.vincenzolabs.cots.match.handler.HostMatchRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  RetrieveMatchesFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Retrieves the filtered matches"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "retrieveMatches"
      Handler: "org.vincenzolabs.cots.match.handler.RetrieveMatchesRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  RetrieveMatchFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Retrieves a match"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "retrieveMatch"
      Handler: "org.vincenzolabs.cots.match.handler.RetrieveMatchRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  CancelMatchFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Cancels an unstarted match"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "cancelMatch"
      Handler: "org.vincenzolabs.cots.match.handler.CancelMatchRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  HandleMatchFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Handles a match"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "handleMatch"
      Handler: "org.vincenzolabs.cots.match.handler.HandleMatchRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn
  MoveShipFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Positions or moves a ship"
      Code:
        S3Bucket: "cots-functions"
        S3Key: "cots-match.zip"
      FunctionName: "moveShip"
      Handler: "org.vincenzolabs.cots.match.handler.MoveShipRequestHandler::handleRequest"
      MemorySize: 512
      Timeout: 15
      TracingConfig:
        Mode: "Active"
      Runtime: "java11"
      Role: !GetAtt CotsExecutionRole.Arn

  ## LAMBDA PERMISSIONS
  CreatePlayerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt CreatePlayerFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  RetrievePlayersPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RetrievePlayersFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  ViewPlayerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt ViewPlayerFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  UpdateAvatarPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt UpdateAvatarFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  LogoutPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt LogoutFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  DeletePlayerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt DeletePlayerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  RetrievePlayerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RetrievePlayerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  UpdateStatisticsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt UpdateStatisticsFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  HostMatchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt HostMatchFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  RetrieveMatchesPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RetrieveMatchesFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  RetrieveMatchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt RetrieveMatchFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  CancelMatchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt CancelMatchFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  HandleMatchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt HandleMatchFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi
  MoveShipPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName: !GetAtt MoveShipFunction.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*"
        - apiGateway: !Ref CotsApi

  # DYNAMODB

  ## DYNAMODB TABLES
  PlayerTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "uuid"
          AttributeType: "S"
        - AttributeName: "emailAddress"
          AttributeType: "S"
        - AttributeName: "nickname"
          AttributeType: "S"
        - AttributeName: "accessToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "uuid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "player"
      GlobalSecondaryIndexes:
        - IndexName: "emailAddresses"
          KeySchema:
            - AttributeName: "emailAddress"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: "nicknames"
          KeySchema:
            - AttributeName: "nickname"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: "accessTokens"
          KeySchema:
            - AttributeName: "accessToken"
              KeyType: "HASH"
          Projection:
            ProjectionType: "KEYS_ONLY"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  MatchTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "uuid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "uuid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "match"

  # S3

  ## S3 BUCKETS
  CotsFunctionsBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: "cots-functions"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  CotsWebBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: "cots-web"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
  CotsAwsBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: "cots-aws"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ## S3 BUCKET POLICIES
  CotsWebBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref CotsWebBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref CotsWebBucket, "/*" ] ]
            Principal:
              CanonicalUser: !GetAtt CotsWebOriginAccessIdentity.S3CanonicalUserId

  # CLOUDFRONT

  ## CLOUDFRONT OAI
  CotsWebOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFront to S3 OAI"

  ## CLOUDFRONT DISTRIBUTION
  CotsWebDistribution:
    Type: "AWS::CloudFront::Distribution"
    DependsOn:
      - CotsWebBucket
      - CotsApiGatewayDeployment
      - CotsWebOriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - "cots.vincenzolabs.org"
        DefaultCacheBehavior:
          Compress: true
          ForwardedValues:
            QueryString: false
          TargetOriginId: cots-web-bucket
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers:
                - "*"
            PathPattern: "/dev/v1/*"
            TargetOriginId: cots-api
            ViewerProtocolPolicy: https-only
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:
              !Join [ "", [ !Ref CotsWebBucket, ".s3.amazonaws.com" ] ]
            Id: cots-web-bucket
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [ "", [ "origin-access-identity/cloudfront/", !Ref CotsWebOriginAccessIdentity ] ]
          - DomainName: !Join
              - ""
              -
                - !Ref CotsApi
                - ".execute-api."
                - !Sub "${AWS::Region}"
                - ".amazonaws.com"
            Id: cots-api
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginPath: /dev
        PriceClass: PriceClass_200
